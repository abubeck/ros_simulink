#include <ros/ros.h>
#include <std_msgs/Float64MultiArray.h>
#include <rtw/grt_main.h>


class <% MODELNAME %>ROS{
public:
	ros::NodeHandle n;
	<% SUBSCRIBER_HEADER %>
	ros::Subscriber ROSLINK_Subscriber_3_sub ;	
	<% PUBLISHER_HEADER %>
	ros::Publisher ROSLINK_Topic_1_pub ;

<% MODELNAME %>ROS()
{
	<% SUBSCRIBER_INIT %>
	ROSLINK_Subscriber_2_sub = n.subscribe("ROSLINK_Subscriber_2", 100, &cob_testslinkcontrollerROS::ROSLINK_Subscriber_2_Callback, this);
	<% TOPIC_INIT %>
	ROSLINK_Topic_2_pub = n.advertise<std_msgs::Float64MultiArray>("ROSLINK_Topic_2", 100);
}


void ROSLINK_Subscriber_3_Callback(const std_msgs::Float64MultiArray& msg)
{
	ROS_INFO("Received something");
}

void ROSLINK_Subscriber_2_Callback(const std_msgs::Float64MultiArray& msg)
{
	ROS_INFO("Received something");
}

void ROSLINK_Meiner_Callback(const std_msgs::Float64MultiArray& msg)
{
	ROS_INFO("Received something");
}

void publishData(int nbrOutputArgs, double* outputArgs)
{
	std_msgs::Float64MultiArray msg;
	msg.data.resize(1);
	msg.data[0] = outputArgs[0];
	ROSLINK_Topic_1_pub.publish(msg);
	msg.data[0] = outputArgs[1];
	ROSLINK_Topic_2_pub.publish(msg);
	msg.data[0] = outputArgs[2];
	ROSLINK_Auch_Meiner_pub.publish(msg);
}

}; //cob_testslinkcontroller


int main(int argc, char** argv)
{
	ros::init(argc, argv, "<% MODELNAME %>");
	initiateController();
	cob_testslinkcontrollerROS cob_testslinkcontroller_node;
	sleep(1);
	ros::Rate loop_rate(5); // Hz
	while(cob_testslinkcontroller_node.n.ok())
 	{ 
		int nbrInputArgs = 3;
		int nbrOutputArgs = 3;
		double inputArgs[3] = {0.3,0.2,0.5};
		double outputArgs[3] = {0.0,0.0,0.0};
		printf("%s\n", getControllerOutput(nbrInputArgs, inputArgs, nbrOutputArgs, outputArgs));
		printf("%f %f %f \n", outputArgs[0], outputArgs[1], outputArgs[2]);
		cob_testslinkcontroller_node.publishData(nbrOutputArgs, outputArgs);
		ros::spinOnce();
 		loop_rate.sleep();
 	}
	performCleanup(); 
	return 0; 
} 
